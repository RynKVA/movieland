/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'java'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {

    // Spring Boot
    implementation("org.springframework.boot:spring-boot-starter-web:3.3.2")
    implementation ('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0') {
        exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
        exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
        exclude(group: "org.springframework", module: "spring-webmvc")
    }
    implementation("org.springframework.boot:spring-boot-starter-jooq:3.3.2")

    // DB
    implementation("org.postgresql:postgresql:42.7.4")
    implementation("org.flywaydb:flyway-core:10.20.0")
    implementation("org.flywaydb:flyway-database-postgresql:10.20.0")

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.2'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers:3.3.2'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.1'
    testImplementation 'org.testcontainers:postgresql:1.19.1'

    //DBRider
    testImplementation 'com.github.database-rider:rider-spring:1.44.0'
    testImplementation 'com.github.database-rider:rider-core:1.41.0'
    testImplementation 'com.github.database-rider:rider-junit5:1.41.0'

}

group = 'com.rynkovoi'
version = '0.0.1-SNAPSHOT'
description = 'movieland'
java.sourceCompatibility = JavaVersion.VERSION_21

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += "-parameters"
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

bootJar {
    archiveFileName = "${project.description}-${project.version}.jar"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
